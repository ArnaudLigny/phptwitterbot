{"name":"PHPTwitterBot","tagline":"A simple Twitter Bot written in PHP5, allowing to search and retweet things.","body":"PHPTwitterBot v2 Documentation\r\n==============================\r\n\r\nIntroduction\r\n------------\r\n\r\nA simple [Twitter](http://twitter.com/) Bot written in [PHP5](http://php.net/), allowing to search and retweet things.\r\n\r\nFeatures\r\n--------\r\n\r\n * Clean OO architecture\r\n * Twitter API client, which can request several implementations of the Twitter API (eg. the identi.ca one)\r\n * Mockable Twitter API server class, to be able to unit-test the whole API without depending on the network connectivity\r\n * A `TwitterBotsFarm` class, configurable with a simple [YAML](http://yaml.org/) file\r\n * Configureable bot methods allowing to callback your own functions/callables\r\n * Command line interface you can use to run configured farms and bots\r\n * Unit-tested using the [lime](http://trac.symfony-project.org/browser/tools/lime) testing framework\r\n\r\nInstallation\r\n------------\r\n\r\nYou can download the [latest archive](http://github.com/n1k0/phptwitterbot/archive/master.zip), or better checkout the [git](http://git-scm.com/) repository:\r\n\r\n    $ mkdir ~/mybots && cd ~/mybots && mkdir vendor\r\n    $ git clone git://github.com/n1k0/phptwitterbot.git vendor/phptwitterbot\r\n    $ ln -s vendor/phptwitterbot/bin/phptwitterbot phptwitterbot\r\n    $ php phptwitterbot --help\r\n\r\nThen you have to create a bots farm configuration file:\r\n\r\n    $ mkdir config && touch config/bots.yml\r\n\r\nSee the next section to learn how to configure this file.\r\n\r\nFarm and Bots configuration\r\n---------------------------\r\n\r\nA farm is a group of configured bots execution directives, which can be described using the YAML syntax. \r\n\r\nHere's a sample farm configuration file:\r\n\r\n    global:\r\n      password:           mYGenericPasswOrd     # this password will be used by default for all bots\r\n      stoponfail:         false                 # won't stop the whole process on error/exception\r\n      allow_magic_method: false                 # will allow php magic methods calls on bot classes\r\n    bots:\r\n      myfirstbotaccount:\r\n        password:         mYAccountPasswOrd     # this particular bot will use its own password\r\n        operations:\r\n          searchAndRetweet:\r\n            arguments:\r\n              terms:      \"twitter php class\"   # will search \"twitter php class\" on twitter timeline and retweet first matched tweets\r\n            periodicity:  1200                  # will be run every 20 minutes\r\n      mysecondbotaccount:\r\n        operations:\r\n          searchAndRetweet:\r\n            arguments:\r\n              terms:      \"#fail\"               # will search for the \"#fail\" hashtag\r\n              options:\r\n                template: \"FAIL! @%s: %s\"       # will render as \"FAIL! @foobar: windows sucks #fail\" where @foobar is the author of the original tweet\r\n                follow:   true                  # will follow the tweet author automatically\r\n            periodicity:  600                   # will be run every 10 minutes\r\n          followFollowers:\r\n            periodicity:  86400                 # will be run every day\r\n\r\nEach sub-element of the `bots` section describes a single bot and its available operations, where the key is the bot username. Of course you still have to create a dedicated Twitter account for each bot.\r\n\r\nIn the provided example, the `mysecondbotaccount` bot will run the `searchAndRetweet` and `followFollowers` operations whereas the `myfirstbotaccount` bot will only run the `searchAndRetweet` one, each time with the provided parameters, options and the specified periodicity (in seconds).\r\n\r\nFor instance, the `searchAndRetweet` operation will search for terms into the public twitter timeline and retweet the first matched tweet containing them using a given formatter pattern. Note that the `follow` option will make the bot to follow the author of a matched tweet automatically.\r\n\r\nThe `followFollowers` operation will check periodically the list of followers for the bot account, and follow every of them back in return.\r\n\r\nCheck the `TwitterBot.class.php` API to see what are the available other operations.\r\n\r\nTo run the bots farm once configured, just use the command line interface:\r\n\r\n    $ php phptwitterbot config/bots.yml\r\n\r\nThe command line interface\r\n--------------------------\r\n\r\nPHPTwitterBot ships with a shiny `phptwitterbot` executable for the command line interface you can find in the `bin` folder of the project codebase. This program allows to run all configured bots farm operations in one call.\r\n\r\n### Usage and Options\r\n\r\nNote that this program can be executed several ways:\r\n\r\n    $ php bin/phptwitterbot\r\n    $ bin/phptwitterbot\r\n    $ cd bin\r\n    $ php phptwitterbot\r\n    $ ./phptwitterbot\r\n    $ sudo ln -s phptwitterbot /usr/bin/phptwitterbot\r\n    $ phptwitterbot\r\n\r\nThe only required argument is the relative or absolute path to where the YAML bots configuration file resides:\r\n\r\n    $ ./phptwitterbot config/bots_configuration.yml\r\n    $ ./phptwitterbot /home/user/my_other_bots_configuration.yml\r\n\r\nTo run a particular bot, use the --bot option:\r\n\r\n    $ ./phptwitterbot myBots.yml --bot=myBotName\r\n\r\nTo set the path of a custom cronlogs file (this file will store the logs of \r\nbot executions):\r\n\r\n    $ ./phptwitterbot configFile.yml --cronlogs=/tmp/my_cronlogs.log\r\n\r\nTo enable verbose debugging output, use the --debug option:\r\n\r\n    $ ./phptwitterbot configFile.yml --debug\r\n\r\nTo run the whole phptwitterbot unit tests suite, use the --test option:\r\n\r\n    $ ./phptwitterbot --test\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}